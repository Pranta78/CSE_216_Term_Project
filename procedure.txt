CREATE SEQUENCE ACCOUNT_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE POST_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE TWEET_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE TWEET_COMMENT_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE MESSAGE_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE NOTIFICATION_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE FOLLOW_NOTIFICATION_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE POST_MENTION_NOTIFICATION_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE OR REPLACE FUNCTION HASH_PASSWORD(EMAIL_ IN VARCHAR2, USERNAME_ IN VARCHAR2, PASSWORD_ IN VARCHAR2) 
RETURN VARCHAR2 AS 
 
BEGIN 
    RETURN DBMS_CRYPTO.HASH(UTL_RAW.CAST_TO_RAW(PASSWORD_||LOWER(USERNAME_)||UPPER(EMAIL_)), DBMS_CRYPTO.HASH_SH1); 
END;

CREATE OR REPLACE PROCEDURE LOGIN(EMAIL_OR_USERNAME IN VARCHAR2, PASSWORD_ IN VARCHAR2, MSG OUT VARCHAR2, USER_ID OUT NUMBER, USERNAME_ OUT VARCHAR2) IS
	CNT NUMBER;
	
BEGIN
	IF EMAIL_OR_USERNAME LIKE '_%@_%._%' THEN
		SELECT COUNT(*) INTO CNT
		FROM ACCOUNT
		WHERE EMAIL = EMAIL_OR_USERNAME
		AND PASSWORD = HASH_PASSWORD(EMAIL_OR_USERNAME, ACCOUNTNAME, PASSWORD_);
		
		IF CNT <> 1 THEN
			MSG := 'Invalid username/email or password';
		ELSE
			SELECT ID, ACCOUNTNAME INTO USER_ID, USERNAME_
			FROM ACCOUNT
			WHERE EMAIL = EMAIL_OR_USERNAME;
			MSG := 'OK';
		END IF;
	
	ELSIF REGEXP_LIKE(EMAIL_OR_USERNAME, '^[A-Za-z0-9_]+$') THEN
		SELECT COUNT(*) INTO CNT
		FROM ACCOUNT
		WHERE ACCOUNTNAME = EMAIL_OR_USERNAME
		AND PASSWORD = HASH_PASSWORD(EMAIL, EMAIL_OR_USERNAME, PASSWORD_);
		
		IF CNT <> 1 THEN
			MSG := 'Invalid username/email or password';
		ELSE
			SELECT ID, ACCOUNTNAME INTO USER_ID, USERNAME_
			FROM ACCOUNT
			WHERE ACCOUNTNAME = EMAIL_OR_USERNAME;
			MSG := 'OK';
		END IF;
	
	ELSE
		MSG := 'Invalid username/email or password';
		
	END if;
		
EXCEPTION
	WHEN OTHERS THEN
		MSG := 'Unknown error! '||SQLERRM;
END;

CREATE OR REPLACE PROCEDURE CREATE_ACCOUNT
(EMAIL_ IN VARCHAR2, ACCOUNTNAME_ IN VARCHAR2, PASSWORD_ IN VARCHAR2,
DATE_OF_BIRTH_ IN VARCHAR2, MSG OUT VARCHAR2) IS
	CNT NUMBER;
	BIRTHDAY DATE;
	
	EMAIL_NN_VALID EXCEPTION;
	EMAIL_UN EXCEPTION;
	ACCOUNTNAME_NN_VALID EXCEPTION;
	ACCOUNTNAME_UN EXCEPTION;
	PASS_NN EXCEPTION;
	TOO_YOUNG EXCEPTION;
	
BEGIN
	IF (EMAIL_ IS NULL) OR (EMAIL_ NOT LIKE '_%@_%._%') THEN
		RAISE EMAIL_NN_VALID;
	END IF;
	
	SELECT COUNT(*) INTO CNT
	FROM ACCOUNT
	WHERE EMAIL = EMAIL_;
	
	IF CNT <> 0 THEN
		RAISE EMAIL_UN;
	END IF;
	
	IF (ACCOUNTNAME_ IS NULL) OR (NOT REGEXP_LIKE(ACCOUNTNAME_, '^[A-Za-z0-9_]+$')) THEN
		RAISE ACCOUNTNAME_NN_VALID;
	END IF;
	
	SELECT COUNT(*) INTO CNT
	FROM ACCOUNT
	WHERE ACCOUNTNAME = ACCOUNTNAME_;
	
	IF CNT <> 0 THEN
		RAISE ACCOUNTNAME_UN;
	END IF;
	
	IF PASSWORD_ IS NULL THEN
		RAISE PASS_NN;
	END IF;
	
	IF DATE_OF_BIRTH_ IS NOT NULL THEN
		BIRTHDAY := TO_DATE(DATE_OF_BIRTH_, 'YYYY-MM-DD');
		
		IF (SYSDATE-BIRTHDAY)/365 < 13 THEN
			RAISE TOO_YOUNG;
		END IF;
	END IF;
	
	INSERT INTO ACCOUNT(ID, EMAIL, ACCOUNTNAME, PASSWORD, DATE_OF_BIRTH)
	VALUES(ACCOUNT_SEQ.NEXTVAL, EMAIL_, ACCOUNTNAME_, HASH_PASSWORD(EMAIL_, ACCOUNTNAME_, PASSWORD_), BIRTHDAY);
	MSG := 'OK';
	
EXCEPTION
	WHEN EMAIL_NN_VALID THEN
		MSG := 'Please enter a valid email address!';
	WHEN EMAIL_UN THEN
		MSG := 'Given email address has already been used!';
	WHEN ACCOUNTNAME_NN_VALID THEN
		MSG := 'Username is not valid! Only alphanumeric characters and underscore(_) are allowed.';
	WHEN ACCOUNTNAME_UN THEN
		MSG := 'Given username has already been used!';
	WHEN PASS_NN THEN
		MSG := 'Password field cannot be empty!';
	WHEN TOO_YOUNG THEN
		MSG := 'You must be at least 13 year old to create an account!';
	WHEN OTHERS THEN
		MSG := 'Unknown error occurred! ' || SQLERRM;
	
END;


CREATE OR REPLACE PROCEDURE INSERT_MESSAGE(SENDER IN VARCHAR2, RECEIVER IN VARCHAR2, TEXT_ IN VARCHAR2, MEDIA_ IN VARCHAR2, MSG OUT VARCHAR2) IS
	SID NUMBER;
	RID NUMBER;
	MID NUMBER;

	MSG_TEXT_OR_MEDIA_BOTH_NN EXCEPTION;

BEGIN
	IF TEXT_ IS NULL AND MEDIA_ IS NULL THEN
		RAISE MSG_TEXT_OR_MEDIA_BOTH_NN;
	END IF;

	SELECT ID INTO SID
	FROM ACCOUNT
	WHERE ACCOUNTNAME = SENDER;

	SELECT ID INTO RID
	FROM ACCOUNT
	WHERE ACCOUNTNAME = RECEIVER;

	MID := MESSAGE_SEQ.NEXTVAL;

	INSERT INTO MESSAGE(ID, TEXT, MEDIA)
	VALUES(MID, TEXT_, MEDIA_);
	INSERT INTO ACCOUNT_SENDS_MESSAGE VALUES(SID, MID);
	INSERT INTO ACCOUNT_RECEIVES_MESSAGE VALUES(RID, MID);

	MSG := 'OK';

EXCEPTION
	WHEN MSG_TEXT_OR_MEDIA_BOTH_NN THEN
		MSG := 'Text and media both cannot be empty!';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'Multiple entries found for the receiver/sender!';
	WHEN NO_DATA_FOUND THEN
		MSG := 'No entry found for the receiver/sender!';
	WHEN OTHERS THEN
		MSG := 'Unknown error occurred! ' || SQLERRM;

END;

CREATE OR REPLACE PROCEDURE INSERT_FOLLOW_NOTIF(FOLLOWER IN VARCHAR2, FOLLOWED IN VARCHAR2, MSG OUT VARCHAR2) IS
	NID NUMBER;
	FNID NUMBER;
	FOLLOWER_ID NUMBER;
	FOLLOWED_ID NUMBER;
	CNT NUMBER;

BEGIN
	SELECT ID INTO FOLLOWER_ID
	FROM ACCOUNT
	WHERE ACCOUNTNAME = FOLLOWER;

	SELECT ID INTO FOLLOWED_ID
	FROM ACCOUNT
	WHERE ACCOUNTNAME = FOLLOWED;

	--look up whether there is already an entry for the account to be followed
	SELECT COUNT(*) INTO CNT
	FROM FOLLOW_NOTIFICATION
	WHERE FOLLOWED_ACCOUNT_ID = FOLLOWED_ID;

	--if there is no entry, create one
	IF CNT = 0 THEN
		NID := NOTIFICATION_SEQ.NEXTVAL;
		FNID := FOLLOW_NOTIFICATION_SEQ.NEXTVAL;

		INSERT INTO NOTIFICATION(ID)
		VALUES(NID);

		INSERT INTO FOLLOW_NOTIFICATION
		VALUES(FNID, NID, FOLLOWED_ID);

		INSERT INTO ACCOUNT_FOLLOWS_ACCOUNT(ACCOUNT_ID, F_NOTIFICATION_ID)
		VALUES(FOLLOWER_ID, FNID);

		INSERT into NOTIFICATION_NOTIFIES_ACCOUNT(ACCOUNT_ID,NOTIFICATION_ID,seen)
		VALUES(FOLLOWED_ID, NID, NULL);

	ELSIF CNT = 1 THEN
		SELECT FOLLOW_NOTIFICATION_ID,NOTIFICATION_BASE_ID INTO FNID, NID
		FROM FOLLOW_NOTIFICATION
		WHERE FOLLOWED_ACCOUNT_ID = FOLLOWED_ID;

		INSERT INTO ACCOUNT_FOLLOWS_ACCOUNT(ACCOUNT_ID, F_NOTIFICATION_ID)
		VALUES(FOLLOWER_ID, FNID);

		INSERT into NOTIFICATION_NOTIFIES_ACCOUNT(ACCOUNT_ID,NOTIFICATION_ID,seen)
		VALUES(FOLLOWED_ID, NID, NULL);

	END IF;

	MSG := 'OK';

EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'You already follow that user!';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'Multiple entries found for the follower/followed!';
	WHEN NO_DATA_FOUND THEN
		MSG := 'No entry found for the follower/followed!';
	WHEN OTHERS THEN
		MSG := 'Unknown error occurred! ' || SQLERRM;

END;

CREATE OR REPLACE PROCEDURE CREATE_MENTION_NOTIF(
POST_ID IN INTEGER,
BASE_NOTIF_ID out INTEGER,
POST_MENTION_NOTIF_ID out INTEGER,
MSG OUT VARCHAR2) IS
BEGIN
	BASE_NOTIF_ID := NOTIFICATION_SEQ.NEXTVAL;
	INSERT INTO NOTIFICATION(ID)
	VALUES(BASE_NOTIF_ID);

	POST_MENTION_NOTIF_ID := POST_MENTION_NOTIFICATION_SEQ.NEXTVAL;

	INSERT INTO POST_MENTION_NOTIFICATION VALUES(
	POST_MENTION_NOTIF_ID, BASE_NOTIF_ID,POST_ID);
	MSG := 'OK';

EXCEPTION
	WHEN OTHERS THEN
		MSG := 'UNKNOWN Exception';
END;

CREATE OR REPLACE PROCEDURE CREATE_TWEET(
ACCOUNT_ID in INTEGER,
TEXT in VARCHAR2,
MEDIA in VARCHAR2,
ALLOWED_ACCOUNTS in VARCHAR2,
TWEET_ID out INTEGER,
POST_ID out INTEGER,
NOTIF_ID out INTEGER,
PM_NOTIF_ID out INTEGER) IS
	MSG VARCHAR2(100);
BEGIN
	TWEET_ID := TWEET_SEQ.NEXTVAL;
	POST_ID := POST_SEQ.NEXTVAL;
	INSERT INTO POST(ID,TEXT,MEDIA,ALLOWED_ACCOUNTS) VALUES(POST_ID, TEXT, MEDIA, ALLOWED_ACCOUNTS);

	INSERT INTO TWEET VALUES(TWEET_ID, POST_ID);
	TWITTER.CREATE_MENTION_NOTIF(POST_ID, NOTIF_ID, PM_NOTIF_ID, MSG);
	IF MSG = 'OK' THEN
		INSERT INTO ACCOUNT_POSTS_POST VALUES(
		POST_ID, ACCOUNT_ID, PM_NOTIF_ID);
	END IF;
END;

CREATE OR REPLACE PROCEDURE CREATE_COMMENT(
ACCOUNT_ID in INTEGER,
TWEET_ID in INTEGER,
PARENT_COMMENT_ID in INTEGER DEFAULT NULL,
TEXT in VARCHAR2,
MEDIA in VARCHAR2,
ALLOWED_ACCOUNTS in VARCHAR2,
COMMENT_ID out INTEGER,
NOTIF_ID out INTEGER,
PM_NOTIFICATION_ID out INTEGER,
POST_ID out INTEGER) IS
	MSG VARCHAR2(100);
BEGIN
	COMMENT_ID := TWEET_COMMENT_SEQ.NEXTVAL;
	POST_ID := POST_SEQ.NEXTVAL;

	INSERT INTO POST(ID,TEXT,MEDIA,ALLOWED_ACCOUNTS) VALUES(POST_ID, TEXT, MEDIA, ALLOWED_ACCOUNTS);

	INSERT INTO TWEET_COMMENT(COMMENT_ID, POST_ID, TWEET_ID, PARENT_COMMENT_ID)
	VALUES(COMMENT_ID, POST_ID, TWEET_ID, PARENT_COMMENT_ID);

	TWITTER.CREATE_MENTION_NOTIF(POST_ID, NOTIF_ID, PM_NOTIFICATION_ID, MSG);
	IF MSG = 'OK' THEN
		INSERT INTO ACCOUNT_POSTS_POST VALUES(
		POST_ID, ACCOUNT_ID, POST_MENTION_NOTIFICATION_SEQ.CURRVAL);
	END IF;
END;

CREATE OR REPLACE PROCEDURE CREATE_ROOT_COMMENT(
ACCOUNT_ID in INTEGER,
TWEET_ID in INTEGER,
TEXT in VARCHAR2,
MEDIA in VARCHAR2,
ALLOWED_ACCOUNTS in VARCHAR2,
COMMENT_ID out INTEGER,
NOTIF_ID out INTEGER,
PM_NOTIFICATION_ID out INTEGER,
POST_ID out INTEGER) IS

BEGIN
	TWITTER.CREATE_COMMENT(account_ID, TWEET_ID, NULL, TEXT, MEDIA, ALLOWED_ACCOUNTS, COMMENT_ID, NOTIF_ID,PM_NOTIFICATION_ID, POST_ID);
END;

--Given a user and a post id, this procedure checks whether the user has sufficient privacy to view that post, Returns 1 if true, else 0
CREATE OR REPLACE FUNCTION IS_USER_AUDIENCE
(USERNAME_ IN VARCHAR2, POST_ID_ IN NUMBER) RETURN NUMBER IS

	PRIVACY VARCHAR2(30);
	USER_ID_ NUMBER;
	AUTHOR_ID NUMBER;
	CNT NUMBER;

BEGIN
	SELECT ID INTO USER_ID_
	FROM ACCOUNT
	WHERE ACCOUNTNAME = USERNAME_;

	--Retrieving Author id
	SELECT ACCOUNT_ID INTO AUTHOR_ID
	FROM ACCOUNT_POSTS_POST
	WHERE POST_ID = POST_ID_;

	--Retrieving privacy
	SELECT ALLOWED_ACCOUNTS INTO PRIVACY
	FROM POST
	WHERE ID = POST_ID_;

	--Author can see his own post
	IF AUTHOR_ID=USER_ID_ OR PRIVACY='PUBLIC' THEN
		RETURN 1;
	END IF;

	IF PRIVACY='FOLLOWER' THEN
		--Check whether user_id_ is in author id's follower list
		SELECT COUNT(*) INTO CNT
		FROM ACCOUNT_FOLLOWS_ACCOUNT AFA JOIN FOLLOW_NOTIFICATION FN
		ON(AFA.F_NOTIFICATION_ID = FN.FOLLOW_NOTIFICATION_ID)
		WHERE AFA.ACCOUNT_ID=USER_ID_ AND FN.FOLLOWED_ACCOUNT_ID=AUTHOR_ID;

		--When cnt=0, user_id_ is not a follower
		IF CNT=0 THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END IF;

	--Join mention tables and check whether user_id_ is in the mentioned list
	IF PRIVACY='MENTION' THEN
		SELECT COUNT(*) INTO CNT
		FROM POST_MENTION_NOTIFICATION PMN JOIN POST_MENTIONS_ACCOUNT PMA
		ON(PMN.POST_MENTION_NOTIFICATION_ID = PMA.PM_NOTIFICATION_ID)
		WHERE PMA.ACCOUNT_ID=USER_ID_ AND PMN.MENTIONED_POST_ID=POST_ID_;

		--When cnt=0, user_id_ was not mentioned in the post
		IF CNT=0 THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END IF;

EXCEPTION
	WHEN OTHERS THEN
		RETURN -1;

END;


CREATE OR REPLACE VIEW FOLLOWER
AS
SELECT
(SELECT ACCOUNTNAME FROM ACCOUNT A WHERE A.ID=AFA.ACCOUNT_ID) FOLLOWER,
(SELECT ACCOUNTNAME FROM ACCOUNT A WHERE A.ID=FN.FOLLOWED_ACCOUNT_ID) FOLLOWED
FROM ACCOUNT_FOLLOWS_ACCOUNT AFA JOIN FOLLOW_NOTIFICATION FN
ON (AFA.F_NOTIFICATION_ID = FN.FOLLOW_NOTIFICATION_ID);


CREATE OR REPLACE TRIGGER PARSE_HASHTAG
AFTER INSERT
ON POST
FOR EACH ROW
DECLARE
	STRING VARCHAR2(300);
	N NUMBER;
	REG VARCHAR2(30);
	MATCH VARCHAR2(300);
	CNT NUMBER;

BEGIN
	IF :NEW.TEXT IS NOT NULL THEN
		STRING := :NEW.TEXT;
		--oracle has many restrictions, like no look ahead lookup allowed
		--so this simplest regex seemed feasible
		REG := '#(\w+)';

		--At first get the total number of matches
		SELECT REGEXP_COUNT(STRING, REG) INTO N
		FROM DUAL;

		--The fourth parameter in REGEXP_SUBSTR indicates the number of occurrence
		--to search for
		--Iterate for every occurrence of regex match
		FOR I IN 1..N
		LOOP
			--returns i-th match for given regexp
			SELECT REGEXP_SUBSTR(STRING, REG, 1, I, NULL, 1) INTO MATCH
			FROM DUAL;

			--got i-th match
			--now check whether this hashtag already exists
			SELECT COUNT(*) INTO CNT
			FROM HASHTAG
			WHERE TEXT = MATCH;

			--if it does not exist, insert it to the HASHTAG table
			IF CNT = 0 THEN
				INSERT INTO HASHTAG VALUES(MATCH);
			END IF;

			--in case any post contains same hashtag multiple times, insert them only once
			--at most one distinct hashtag per post is allowed in the table
			--otherwise primary key violation will occur
			SELECT COUNT(*) INTO CNT
			FROM POST_CONTAINS_HASHTAG
			WHERE POST_ID = :NEW.ID
			AND HASHTAG_TEXT = MATCH;

			IF CNT = 0 THEN
				INSERT INTO POST_CONTAINS_HASHTAG
				VALUES(:NEW.ID, MATCH);
			END IF;
		END LOOP;
	END IF;
END;


CREATE VIEW COMMENT_VIEW
AS
SELECT P.ID POST_ID, P.TIMESTAMP, P.TEXT, P.MEDIA,
A.PROFILE_PHOTO, A.ACCOUNTNAME AUTHOR, A.ID ACCOUNT_ID,
TC.COMMENT_ID, TC.PARENT_COMMENT_ID, TC.TWEET_ID,
('/tweet/'||TC.TWEET_ID||'/') AS PARENT_TWEET_LINK,
NVL2(TC.PARENT_COMMENT_ID, '/create/reply/comment/'||TC.PARENT_COMMENT_ID||'/', TC.PARENT_COMMENT_ID) AS PARENT_COMMENT_LINK,
NVL2(TC.COMMENT_ID, '/create/reply/comment/'||TC.COMMENT_ID||'/', TC.COMMENT_ID)	AS COMMENTLINK,
(SELECT A2.ACCOUNTNAME
FROM TWEET T2 JOIN POST P2
ON(T2.POST_ID = P2.ID)
JOIN ACCOUNT_POSTS_POST APP2
ON(P2.ID = APP2.POST_ID)
JOIN ACCOUNT A2
ON(A2.ID = APP2.ACCOUNT_ID)
WHERE TC.TWEET_ID = T2.TWEET_ID
) "replied_to"

FROM TWEET_COMMENT TC JOIN POST P
ON(TC.POST_ID = P.ID)
JOIN ACCOUNT_POSTS_POST APP
ON(P.ID = APP.POST_ID)
JOIN ACCOUNT A
ON(APP.ACCOUNT_ID = A.ID);


CREATE VIEW TWEET_VIEW
AS
SELECT P.ID POST_ID, P.TIMESTAMP, P.TEXT, P.MEDIA,
A.PROFILE_PHOTO, A.ACCOUNTNAME AUTHOR, A.ID ACCOUNT_ID,
T.TWEET_ID, ('/tweet/'||T.TWEET_ID||'/') AS COMMENTLINK
FROM TWEET T JOIN POST P
ON(T.POST_ID = P.ID)
JOIN ACCOUNT_POSTS_POST APP
ON(P.ID = APP.POST_ID)
JOIN ACCOUNT A
ON(APP.ACCOUNT_ID = A.ID);

CREATE OR REPLACE function get_unseen_notif_count(
	USER_ID in INTEGER
) return INTEGER IS
	c INTEGER;
BEGIN
	c := 0;

	SELECT COUNT(*) INTO c
	FROM NOTIFICATION_NOTIFIES_ACCOUNT nna
	WHERE nna.SEEN is NULL AND nna.ACCOUNT_ID = USER_ID;

	return c;
END;

CREATE OR REPLACE PROCEDURE RETWEET_POST(
TEXT in VARCHAR2,
P_ID in INTEGER,
ACCOUNT_ID in INTEGER,
RETWEETED_AUTHOR_ID out INTEGER,
PM_NOTIF_ID out INTEGER
) IS
	MSG VARCHAR2(100);
	NOTIF_ID INTEGER;
BEGIN
	SELECT
		app.ACCOUNT_ID
	INTO
		RETWEETED_AUTHOR_ID
	FROM
		POST p
		JOIN TWEET t on(p.ID = t.POST_ID)
		JOIN ACCOUNT_POSTS_POST app on(app.POST_ID = p.ID)
		WHERE p.ID = P_ID;

	if RETWEETED_AUTHOR_ID is NULL THEN
			SELECT
				app.ACCOUNT_ID
			INTO
				RETWEETED_AUTHOR_ID
			FROM
				POST p
				JOIN TWEET_COMMENT c on(p.ID = c.POST_ID)
				JOIN ACCOUNT_POSTS_POST app on(app.POST_ID = p.ID);

			if RETWEETED_AUTHOR_ID is NULL THEN
				MSG :=  'RETWEET POST_ID is INVALID';
				RETURN;
			ELSE
				MSG :=  'RETWEETED A COMMENT';
			END IF;
	ELSE
		MSG := 'RETWEETED A TWEET';
	END IF;


	TWITTER.CREATE_MENTION_NOTIF(P_ID, NOTIF_ID, PM_NOTIF_ID, MSG);
	INSERT INTO
		ACCOUNT_RETWEETS_POST
	VALUES(
		ACCOUNT_ID, P_ID, PM_NOTIF_ID, SYSDATE, TEXT
	);

	INSERT INTO
		NOTIFICATION_NOTIFIES_ACCOUNT
	VALUES(
		RETWEETED_AUTHOR_ID, NOTIF_ID, NULL
	);

END;

CREATE OR REPLACE PROCEDURE "INSERT_LIKE_AND_NOTIF"(
	LIKER_USER_ID in INTEGER,
	LIKED_POST_ID in INTEGER
)IS
BASE_NOTIFICATION_ID INTEGER;
PM_NOTIFICATION_ID INTEGER;
POST_AUTHOR_ID INTEGER;
VALID_LIKER_CHECK INTEGER;
BEGIN
	SELECT a.ID INTO POST_AUTHOR_ID
	FROM ACCOUNT a JOIN ACCOUNT_POSTS_POST app on(app.ACCOUNT_ID = a.ID)
	WHERE app.POST_ID = LIKED_POST_ID;

	SELECT COUNT(*) INTO VALID_LIKER_CHECK FROM ACCOUNT WHERE ID = LIKER_USER_ID;

	if POST_AUTHOR_ID is not NULL AND VALID_LIKER_CHECK = 1 THEN
		BASE_NOTIFICATION_ID := NOTIFICATION_SEQ.NEXTVAL;
		PM_NOTIFICATION_ID := POST_MENTION_NOTIFICATION_SEQ.NEXTVAL;

		INSERT INTO NOTIFICATION(ID)
		VALUES(BASE_NOTIFICATION_ID);

		INSERT INTO POST_MENTION_NOTIFICATION
		VALUES(PM_NOTIFICATION_ID,BASE_NOTIFICATION_ID, LIKED_POST_ID);

		INSERT INTO NOTIFICATION_NOTIFIES_ACCOUNT
		VALUES(POST_AUTHOR_ID, BASE_NOTIFICATION_ID, NULL);

		INSERT INTO ACCOUNT_LIKES_POST
		VALUES(LIKER_USER_ID, LIKED_POST_ID, PM_NOTIFICATION_ID);
	END IF;
END;

CREATE OR REPLACE TRIGGER DELETE_NOTIFS_LINKED_TO_POST
AFTER DELETE
ON POST
--deleting ON POST_MENTION_NOTIFICATION causes a cyclic error
--delete on POST instead
FOR EACH ROW
BEGIN
	DELETE FROM NOTIFICATION n
	WHERE n.ID in (
		SELECT NOTIFICATION_BASE_ID
		FROM POST_MENTION_NOTIFICATION
		WHERE MENTIONED_POST_ID = :old.ID
	);
END;