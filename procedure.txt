CREATE SEQUENCE ACCOUNT_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE POST_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE TWEET_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE TWEET_COMMENT_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE MESSAGE_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE NOTIFICATION_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE FOLLOW_NOTIFICATION_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE POST_MENTION_NOTIFICATION_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE OR REPLACE FUNCTION HASH_PASSWORD(EMAIL_ IN VARCHAR2, USERNAME_ IN VARCHAR2, PASSWORD_ IN VARCHAR2) 
RETURN VARCHAR2 AS 
 
BEGIN 
    RETURN DBMS_CRYPTO.HASH(UTL_RAW.CAST_TO_RAW(PASSWORD_||LOWER(USERNAME_)||UPPER(EMAIL_)), DBMS_CRYPTO.HASH_SH1); 
END;

CREATE OR REPLACE PROCEDURE LOGIN(EMAIL_OR_USERNAME IN VARCHAR2, PASSWORD_ IN VARCHAR2, MSG OUT VARCHAR2, USER_ID OUT NUMBER, USERNAME_ OUT VARCHAR2) IS
	CNT NUMBER;
	
BEGIN
	IF EMAIL_OR_USERNAME LIKE '_%@_%._%' THEN
		SELECT COUNT(*) INTO CNT
		FROM ACCOUNT
		WHERE EMAIL = EMAIL_OR_USERNAME
		AND PASSWORD = HASH_PASSWORD(EMAIL_OR_USERNAME, ACCOUNTNAME, PASSWORD_);
		
		IF CNT <> 1 THEN
			MSG := 'Invalid username/email or password';
		ELSE
			SELECT ID, ACCOUNTNAME INTO USER_ID, USERNAME_
			FROM ACCOUNT
			WHERE EMAIL = EMAIL_OR_USERNAME;
			MSG := 'OK';
		END IF;
	
	ELSIF REGEXP_LIKE(EMAIL_OR_USERNAME, '^[A-Za-z0-9_]+$') THEN
		SELECT COUNT(*) INTO CNT
		FROM ACCOUNT
		WHERE ACCOUNTNAME = EMAIL_OR_USERNAME
		AND PASSWORD = HASH_PASSWORD(EMAIL, EMAIL_OR_USERNAME, PASSWORD_);
		
		IF CNT <> 1 THEN
			MSG := 'Invalid username/email or password';
		ELSE
			SELECT ID, ACCOUNTNAME INTO USER_ID, USERNAME_
			FROM ACCOUNT
			WHERE ACCOUNTNAME = EMAIL_OR_USERNAME;
			MSG := 'OK';
		END IF;
	
	ELSE
		MSG := 'Invalid username/email or password';
		
	END if;
		
EXCEPTION
	WHEN OTHERS THEN
		MSG := 'Unknown error! '||SQLERRM;
END;

CREATE OR REPLACE PROCEDURE CREATE_ACCOUNT
(EMAIL_ IN VARCHAR2, ACCOUNTNAME_ IN VARCHAR2, PASSWORD_ IN VARCHAR2,
DATE_OF_BIRTH_ IN VARCHAR2, MSG OUT VARCHAR2) IS
	CNT NUMBER;
	BIRTHDAY DATE;
	
	EMAIL_NN_VALID EXCEPTION;
	EMAIL_UN EXCEPTION;
	ACCOUNTNAME_NN_VALID EXCEPTION;
	ACCOUNTNAME_UN EXCEPTION;
	PASS_NN EXCEPTION;
	TOO_YOUNG EXCEPTION;
	
BEGIN
	IF (EMAIL_ IS NULL) OR (EMAIL_ NOT LIKE '_%@_%._%') THEN
		RAISE EMAIL_NN_VALID;
	END IF;
	
	SELECT COUNT(*) INTO CNT
	FROM ACCOUNT
	WHERE EMAIL = EMAIL_;
	
	IF CNT <> 0 THEN
		RAISE EMAIL_UN;
	END IF;
	
	IF (ACCOUNTNAME_ IS NULL) OR (NOT REGEXP_LIKE(ACCOUNTNAME_, '^[A-Za-z0-9_]+$')) THEN
		RAISE ACCOUNTNAME_NN_VALID;
	END IF;
	
	SELECT COUNT(*) INTO CNT
	FROM ACCOUNT
	WHERE ACCOUNTNAME = ACCOUNTNAME_;
	
	IF CNT <> 0 THEN
		RAISE ACCOUNTNAME_UN;
	END IF;
	
	IF PASSWORD_ IS NULL THEN
		RAISE PASS_NN;
	END IF;
	
	IF DATE_OF_BIRTH_ IS NOT NULL THEN
		BIRTHDAY := TO_DATE(DATE_OF_BIRTH_, 'YYYY-MM-DD');
		
		IF (SYSDATE-BIRTHDAY)/365 < 13 THEN
			RAISE TOO_YOUNG;
		END IF;
	END IF;
	
	INSERT INTO ACCOUNT(ID, EMAIL, ACCOUNTNAME, PASSWORD, DATE_OF_BIRTH)
	VALUES(ACCOUNT_SEQ.NEXTVAL, EMAIL_, ACCOUNTNAME_, HASH_PASSWORD(EMAIL_, ACCOUNTNAME_, PASSWORD_), BIRTHDAY);
	MSG := 'OK';
	
EXCEPTION
	WHEN EMAIL_NN_VALID THEN
		MSG := 'Please enter a valid email address!';
	WHEN EMAIL_UN THEN
		MSG := 'Given email address has already been used!';
	WHEN ACCOUNTNAME_NN_VALID THEN
		MSG := 'Username is not valid! Only alphanumeric characters and underscore(_) are allowed.';
	WHEN ACCOUNTNAME_UN THEN
		MSG := 'Given username has already been used!';
	WHEN PASS_NN THEN
		MSG := 'Password field cannot be empty!';
	WHEN TOO_YOUNG THEN
		MSG := 'You must be at least 13 year old to create an account!';
	WHEN OTHERS THEN
		MSG := 'Unknown error occurred! ' || SQLERRM;
	
END;


CREATE OR REPLACE PROCEDURE INSERT_MESSAGE(SENDER IN VARCHAR2, RECEIVER IN VARCHAR2, TEXT_ IN VARCHAR2, MEDIA_ IN VARCHAR2, MSG OUT VARCHAR2) IS
	SID NUMBER;
	RID NUMBER;
	MID NUMBER;

	MSG_TEXT_OR_MEDIA_BOTH_NN EXCEPTION;

BEGIN
	IF TEXT_ IS NULL AND MEDIA_ IS NULL THEN
		RAISE MSG_TEXT_OR_MEDIA_BOTH_NN;
	END IF;

	SELECT ID INTO SID
	FROM ACCOUNT
	WHERE ACCOUNTNAME = SENDER;

	SELECT ID INTO RID
	FROM ACCOUNT
	WHERE ACCOUNTNAME = RECEIVER;

	MID := MESSAGE_SEQ.NEXTVAL;

	INSERT INTO MESSAGE(ID, TEXT, MEDIA)
	VALUES(MID, TEXT_, MEDIA_);
	INSERT INTO ACCOUNT_SENDS_MESSAGE VALUES(SID, MID);
	INSERT INTO ACCOUNT_RECEIVES_MESSAGE VALUES(RID, MID);

	MSG := 'OK';

EXCEPTION
	WHEN MSG_TEXT_OR_MEDIA_BOTH_NN THEN
		MSG := 'Text and media both cannot be empty!';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'Multiple entries found for the receiver/sender!';
	WHEN NO_DATA_FOUND THEN
		MSG := 'No entry found for the receiver/sender!';
	WHEN OTHERS THEN
		MSG := 'Unknown error occurred! ' || SQLERRM;

END;

CREATE OR REPLACE PROCEDURE INSERT_FOLLOW_NOTIF(FOLLOWER IN VARCHAR2, FOLLOWED IN VARCHAR2, MSG OUT VARCHAR2) IS
	NID NUMBER;
	FNID NUMBER;
	FOLLOWER_ID NUMBER;
	FOLLOWED_ID NUMBER;
	CNT NUMBER;

BEGIN
	SELECT ID INTO FOLLOWER_ID
	FROM ACCOUNT
	WHERE ACCOUNTNAME = FOLLOWER;

	SELECT ID INTO FOLLOWED_ID
	FROM ACCOUNT
	WHERE ACCOUNTNAME = FOLLOWED;

	--look up whether there is already an entry for the account to be followed
	SELECT COUNT(*) INTO CNT
	FROM FOLLOW_NOTIFICATION
	WHERE FOLLOWED_ACCOUNT_ID = FOLLOWED_ID;

	--if there is no entry, create one
	IF CNT = 0 THEN
		NID := NOTIFICATION_SEQ.NEXTVAL;
		FNID := FOLLOW_NOTIFICATION_SEQ.NEXTVAL;

		INSERT INTO NOTIFICATION(ID)
		VALUES(NID);

		INSERT INTO FOLLOW_NOTIFICATION
		VALUES(FNID, NID, FOLLOWED_ID);

		INSERT INTO ACCOUNT_FOLLOWS_ACCOUNT(ACCOUNT_ID, F_NOTIFICATION_ID)
		VALUES(FOLLOWER_ID, FNID);

	ELSIF CNT = 1 THEN
		SELECT FOLLOW_NOTIFICATION_ID INTO FNID
		FROM FOLLOW_NOTIFICATION
		WHERE FOLLOWED_ACCOUNT_ID = FOLLOWED_ID;

		INSERT INTO ACCOUNT_FOLLOWS_ACCOUNT(ACCOUNT_ID, F_NOTIFICATION_ID)
		VALUES(FOLLOWER_ID, FNID);

	END IF;

	MSG := 'OK';

EXCEPTION
	WHEN DUP_VAL_ON_INDEX THEN
		MSG := 'You already follow that user!';
	WHEN TOO_MANY_ROWS THEN
		MSG := 'Multiple entries found for the follower/followed!';
	WHEN NO_DATA_FOUND THEN
		MSG := 'No entry found for the follower/followed!';
	WHEN OTHERS THEN
		MSG := 'Unknown error occurred! ' || SQLERRM;

END;

CREATE OR REPLACE PROCEDURE CREATE_MENTION_NOTIF(POST_ID IN INTEGER, MSG OUT VARCHAR2) IS
BEGIN
	INSERT INTO NOTIFICATION(ID)
	VALUES(NOTIFICATION_SEQ.NEXTVAL);

	INSERT INTO POST_MENTION_NOTIFICATION VALUES(
	POST_MENTION_NOTIFICATION_SEQ.NEXTVAL, NOTIFICATION_SEQ.CURRVAL,POST_ID);
	MSG := 'OK';
END;

CREATE OR REPLACE PROCEDURE CREATE_TWEET(
ACCOUNT_ID in INTEGER,
TEXT in VARCHAR2,
MEDIA in VARCHAR2,
ALLOWED_ACCOUNTS in VARCHAR2,
TWEET_ID out INTEGER) IS
	POST_ID INTEGER;
	MSG VARCHAR2(100);
BEGIN
	TWEET_ID := TWEET_SEQ.NEXTVAL;
	POST_ID := POST_SEQ.NEXTVAL;

	INSERT INTO POST(ID,TEXT,MEDIA,ALLOWED_ACCOUNTS) VALUES(POST_ID, TEXT, MEDIA, ALLOWED_ACCOUNTS);

	INSERT INTO TWEET VALUES(TWEET_ID, POST_ID);
	TWITTER.CREATE_MENTION_NOTIF(POST_ID, MSG);
	IF MSG = 'OK' THEN
		INSERT INTO ACCOUNT_POSTS_POST VALUES(
		POST_ID, ACCOUNT_ID, POST_MENTION_NOTIFICATION_SEQ.CURRVAL);
	END IF;
END;

CREATE OR REPLACE PROCEDURE CREATE_COMMENT(
ACCOUNT_ID in INTEGER,
TWEET_ID in INTEGER,
PARENT_COMMENT_ID in INTEGER DEFAULT NULL,
TEXT in VARCHAR2,
MEDIA in VARCHAR2,
ALLOWED_ACCOUNTS in VARCHAR2,
COMMENT_ID out INTEGER) IS
	POST_ID INTEGER;
	MSG VARCHAR2(100);
BEGIN
	COMMENT_ID := TWEET_COMMENT_SEQ.NEXTVAL;
	POST_ID := POST_SEQ.NEXTVAL;

	INSERT INTO POST(ID,TEXT,MEDIA,ALLOWED_ACCOUNTS) VALUES(POST_ID, TEXT, MEDIA, ALLOWED_ACCOUNTS);

	INSERT INTO TWEET_COMMENT(COMMENT_ID, POST_ID, TWEET_ID, PARENT_COMMENT_ID)
	VALUES(COMMENT_ID, POST_ID, TWEET_ID, PARENT_COMMENT_ID);

	TWITTER.CREATE_MENTION_NOTIF(POST_ID, MSG);
	IF MSG = 'OK' THEN
		INSERT INTO ACCOUNT_POSTS_POST VALUES(
		POST_ID, ACCOUNT_ID, POST_MENTION_NOTIFICATION_SEQ.CURRVAL);
	END IF;
END;

CREATE OR REPLACE PROCEDURE CREATE_ROOT_COMMENT(
ACCOUNT_ID in INTEGER,
TWEET_ID in INTEGER,
TEXT in VARCHAR2,
MEDIA in VARCHAR2,
ALLOWED_ACCOUNTS in VARCHAR2,
COMMENT_ID out INTEGER) IS
	POST_ID INTEGER;
	MSG VARCHAR2(100);
BEGIN
	TWITTER.CREATE_COMMENT(ACCOUNT_ID, TWEET_ID, NULL, TEXT, MEDIA , ALLOWED_ACCOUNTS, MSG);
END;


--Given a user and a post id, this procedure checks whether the user has sufficient privacy to view that post, Returns 1 if true, else 0
CREATE OR REPLACE FUNCTION IS_USER_AUDIENCE
(USERNAME_ IN VARCHAR2, POST_ID_ IN NUMBER) RETURN NUMBER IS

	PRIVACY VARCHAR2(30);
	USER_ID_ NUMBER;
	AUTHOR_ID NUMBER;
	CNT NUMBER;

BEGIN
	SELECT ID INTO USER_ID_
	FROM ACCOUNT
	WHERE ACCOUNTNAME = USERNAME_;

	--Retrieving Author id
	SELECT ACCOUNT_ID INTO AUTHOR_ID
	FROM ACCOUNT_POSTS_POST
	WHERE POST_ID = POST_ID_;

	--Retrieving privacy
	SELECT ALLOWED_ACCOUNTS INTO PRIVACY
	FROM POST
	WHERE ID = POST_ID_;

	--Author can see his own post
	IF AUTHOR_ID=USER_ID_ OR PRIVACY='PUBLIC' THEN
		RETURN 1;
	END IF;

	IF PRIVACY='FOLLOWER' THEN
		--Check whether user_id_ is in author id's follower list
		SELECT COUNT(*) INTO CNT
		FROM ACCOUNT_FOLLOWS_ACCOUNT AFA JOIN FOLLOW_NOTIFICATION FN
		ON(AFA.F_NOTIFICATION_ID = FN.FOLLOW_NOTIFICATION_ID)
		WHERE AFA.ACCOUNT_ID=USER_ID_ AND FN.FOLLOWED_ACCOUNT_ID=AUTHOR_ID;

		--When cnt=0, user_id_ is not a follower
		IF CNT=0 THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END IF;

	--Join mention tables and check whether user_id_ is in the mentioned list
	IF PRIVACY='MENTION' THEN
		SELECT COUNT(*) INTO CNT
		FROM POST_MENTION_NOTIFICATION PMN JOIN POST_MENTIONS_ACCOUNT PMA
		ON(PMN.POST_MENTION_NOTIFICATION_ID = PMA.PM_NOTIFICATION_ID)
		WHERE PMA.ACCOUNT_ID=USER_ID_ AND PMN.MENTIONED_POST_ID=POST_ID_;

		--When cnt=0, user_id_ was not mentioned in the post
		IF CNT=0 THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END IF;

EXCEPTION
	WHEN OTHERS THEN
		RETURN -1;

END;


CREATE OR REPLACE VIEW FOLLOWER
AS
SELECT
(SELECT ACCOUNTNAME FROM ACCOUNT A WHERE A.ID=AFA.ACCOUNT_ID) FOLLOWER,
(SELECT ACCOUNTNAME FROM ACCOUNT A WHERE A.ID=FN.FOLLOWED_ACCOUNT_ID) FOLLOWED
FROM ACCOUNT_FOLLOWS_ACCOUNT AFA JOIN FOLLOW_NOTIFICATION FN
ON (AFA.F_NOTIFICATION_ID = FN.FOLLOW_NOTIFICATION_ID);


CREATE OR REPLACE TRIGGER PARSE_HASHTAG
AFTER INSERT
ON POST
FOR EACH ROW
DECLARE
	STRING VARCHAR2(300);
	N NUMBER;
	REG VARCHAR2(30);
	MATCH VARCHAR2(300);
	CNT NUMBER;

BEGIN
	IF :NEW.TEXT IS NOT NULL THEN
		STRING := :NEW.TEXT;
		--oracle has many restrictions, like no look ahead lookup allowed
		--so this simplest regex seemed feasible
		REG := '#(\w+)';

		--At first get the total number of matches
		SELECT REGEXP_COUNT(STRING, REG) INTO N
		FROM DUAL;

		--The fourth parameter in REGEXP_SUBSTR indicates the number of occurrence
		--to search for
		--Iterate for every occurrence of regex match
		FOR I IN 1..N
		LOOP
			--returns i-th match for given regexp
			SELECT REGEXP_SUBSTR(STRING, REG, 1, I, NULL, 1) INTO MATCH
			FROM DUAL;

			--got i-th match
			--now check whether this hashtag already exists
			SELECT COUNT(*) INTO CNT
			FROM HASHTAG
			WHERE TEXT = MATCH;

			--if it does not exist, insert it to the HASHTAG table
			IF CNT = 0 THEN
				INSERT INTO HASHTAG VALUES(MATCH);
			END IF;

			--in case any post contains same hashtag multiple times, insert them only once
			--at most one distinct hashtag per post is allowed in the table
			--otherwise primary key violation will occur
			SELECT COUNT(*) INTO CNT
			FROM POST_CONTAINS_HASHTAG
			WHERE POST_ID = :NEW.ID
			AND HASHTAG_TEXT = MATCH;

			IF CNT = 0 THEN
				INSERT INTO POST_CONTAINS_HASHTAG
				VALUES(:NEW.ID, MATCH);
			END IF;
		END LOOP;
	END IF;
END;
