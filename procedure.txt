CREATE SEQUENCE ACCOUNT_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE POST_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE TWEET_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE TWEET_COMMENT_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE MESSAGE_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE NOTIFICATION_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE FOLLOW_NOTIFICATION_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE SEQUENCE POST_MENTION_NOTIFICATION_SEQ
INCREMENT BY 1
START WITH 1
MAXVALUE 999999999999999
NOCYCLE;

CREATE OR REPLACE FUNCTION HASH_PASSWORD(EMAIL_ IN VARCHAR2, USERNAME_ IN VARCHAR2, PASSWORD_ IN VARCHAR2) 
RETURN VARCHAR2 AS 
 
BEGIN 
    RETURN DBMS_CRYPTO.HASH(UTL_RAW.CAST_TO_RAW(PASSWORD_||LOWER(USERNAME_)||UPPER(EMAIL_)), DBMS_CRYPTO.HASH_SH1); 
END;

CREATE OR REPLACE PROCEDURE LOGIN(EMAIL_OR_USERNAME IN VARCHAR2, PASSWORD_ IN VARCHAR2, MSG OUT VARCHAR2, USER_ID OUT NUMBER, USERNAME_ OUT VARCHAR2) IS
	CNT NUMBER;
	
BEGIN
	IF EMAIL_OR_USERNAME LIKE '_%@_%._%' THEN
		SELECT COUNT(*) INTO CNT
		FROM ACCOUNT
		WHERE EMAIL = EMAIL_OR_USERNAME
		AND PASSWORD = HASH_PASSWORD(EMAIL_OR_USERNAME, ACCOUNTNAME, PASSWORD_);
		
		IF CNT <> 1 THEN
			MSG := 'Invalid username/email or password';
		ELSE
			SELECT ID, ACCOUNTNAME INTO USER_ID, USERNAME_
			FROM ACCOUNT
			WHERE EMAIL = EMAIL_OR_USERNAME;
			MSG := 'OK';
		END IF;
	
	ELSIF REGEXP_LIKE(EMAIL_OR_USERNAME, '^[A-Za-z0-9_]+$') THEN
		SELECT COUNT(*) INTO CNT
		FROM ACCOUNT
		WHERE ACCOUNTNAME = EMAIL_OR_USERNAME
		AND PASSWORD = HASH_PASSWORD(EMAIL, EMAIL_OR_USERNAME, PASSWORD_);
		
		IF CNT <> 1 THEN
			MSG := 'Invalid username/email or password';
		ELSE
			SELECT ID, ACCOUNTNAME INTO USER_ID, USERNAME_
			FROM ACCOUNT
			WHERE ACCOUNTNAME = EMAIL_OR_USERNAME;
			MSG := 'OK';
		END IF;
	
	ELSE
		MSG := 'Invalid username/email or password';
		
	END if;
		
EXCEPTION
	WHEN OTHERS THEN
		MSG := 'Unknown error! '||SQLERRM;
END;

CREATE OR REPLACE PROCEDURE CREATE_ACCOUNT
(EMAIL_ IN VARCHAR2, ACCOUNTNAME_ IN VARCHAR2, PASSWORD_ IN VARCHAR2,
DATE_OF_BIRTH_ IN VARCHAR2, MSG OUT VARCHAR2) IS
	CNT NUMBER;
	BIRTHDAY DATE;
	
	EMAIL_NN_VALID EXCEPTION;
	EMAIL_UN EXCEPTION;
	ACCOUNTNAME_NN_VALID EXCEPTION;
	ACCOUNTNAME_UN EXCEPTION;
	PASS_NN EXCEPTION;
	TOO_YOUNG EXCEPTION;
	
BEGIN
	IF (EMAIL_ IS NULL) OR (EMAIL_ NOT LIKE '_%@_%._%') THEN
		RAISE EMAIL_NN_VALID;
	END IF;
	
	SELECT COUNT(*) INTO CNT
	FROM ACCOUNT
	WHERE EMAIL = EMAIL_;
	
	IF CNT <> 0 THEN
		RAISE EMAIL_UN;
	END IF;
	
	IF (ACCOUNTNAME_ IS NULL) OR (NOT REGEXP_LIKE(ACCOUNTNAME_, '^[A-Za-z0-9_]+$')) THEN
		RAISE ACCOUNTNAME_NN_VALID;
	END IF;
	
	SELECT COUNT(*) INTO CNT
	FROM ACCOUNT
	WHERE ACCOUNTNAME = ACCOUNTNAME_;
	
	IF CNT <> 0 THEN
		RAISE ACCOUNTNAME_UN;
	END IF;
	
	IF PASSWORD_ IS NULL THEN
		RAISE PASS_NN;
	END IF;
	
	IF DATE_OF_BIRTH_ IS NOT NULL THEN
		BIRTHDAY := TO_DATE(DATE_OF_BIRTH_, 'YYYY-MM-DD');
		
		IF (SYSDATE-BIRTHDAY)/365 < 13 THEN
			RAISE TOO_YOUNG;
		END IF;
	END IF;
	
	INSERT INTO ACCOUNT(ID, EMAIL, ACCOUNTNAME, PASSWORD, DATE_OF_BIRTH)
	VALUES(ACCOUNT_SEQ.NEXTVAL, EMAIL_, ACCOUNTNAME_, HASH_PASSWORD(EMAIL_, ACCOUNTNAME_, PASSWORD_), BIRTHDAY);
	MSG := 'OK';
	
EXCEPTION
	WHEN EMAIL_NN_VALID THEN
		MSG := 'Please enter a valid email address!';
	WHEN EMAIL_UN THEN
		MSG := 'Given email address has already been used!';
	WHEN ACCOUNTNAME_NN_VALID THEN
		MSG := 'Username is not valid! Only alphanumeric characters and underscore(_) are allowed.';
	WHEN ACCOUNTNAME_UN THEN
		MSG := 'Given username has already been used!';
	WHEN PASS_NN THEN
		MSG := 'Password field cannot be empty!';
	WHEN TOO_YOUNG THEN
		MSG := 'You must be at least 13 year old to create an account!';
	WHEN OTHERS THEN
		MSG := 'Unknown error occurred! ' || SQLERRM;
	
END;